# Disable sudo to speed up build
sudo:                     false

# Set the build language
language:                 python

# Set the build language version
python:                   3.6.6

# Set build branch
branches:                 master

cache:
  directories:
    # Cache the .cache directory
    - $HOME/.cache
    # Cache the .thumbs directory
    - $HOME/.thumbs

before_install:
  # Configure access token to enable pushing to the repository
  - git remote set-url origin https://Richienb:${github_token}@github.com/Richienb/ROS-Code.git

  # Set commit username
  - git config --global user.name "ROS Bot"

  # Set commit email
  - git config --global user.email "richiebendall@gmail.com"

  # Make all shell files in ci executable
  - find $TRAVIS_BUILD_DIR/ci -type f -iname "*.sh" -exec chmod +x {} \;

install:
  # Install dependencies from requirements.txt
  - pip install -r requirements.txt

jobs:
  include:
    - stage:              pre build # Check if the code is Python 3 compatible

      install:
        # Install the required dependency
        - pip install caniusepython3

      script:
        # Perform check
        - caniusepython3 -r requirements.txt

    - stage:              optimisation # Fix the ignored files if the gitignore was updated

      # Only run if on branch
      if:                 type != pull_request

      # Set build language
      language:           generic

      # Skip installation step
      install:            true

      script:
        # Reset Gitignore cache
        - git rm -r --cached .

        # Add afll files to the cache
        - git add .

      after_script:
        # Check and commit
        - git diff-index --quiet HEAD || git commit -m "CI | Fix the Gitignore [skip ci]"

        # Push changes
        - until git push origin HEAD:master; do git pull && git commit --amend -m"$(git log -1 --pretty=%B)"; done;

    - # Make the code backwards compatible

      install:
        # Install the required dependency
        - pip install future

      before_script:
        # Navigate to the source code directory
        - cd src

      script:
        # Perform optimisations
        - find  -type f  -name "*.py" -exec pasteurize -w "{}" \;

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Added Backwards Compatibility [skip ci]"

        # Push changes
        - until git push origin HEAD:master; do git pull && git commit --amend -m"$(git log -1 --pretty=%B)"; done;

    - # Optimise the code to work with PEP8

      install:
        # Install required dependency
        - pip install autopep8

      script:
        # Optimise files
        - autopep8 --verbose --in-place --recursive --aggressive --aggressive --exclude min/* .

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Optimise the code to work with PEP8 [skip ci]"

        # Push changes
        - until git push origin HEAD:master; do git pull && git commit --amend -m"$(git log -1 --pretty=%B)"; done;

    - # Optimise the code to work with FLAKE8

      install:
        # Install required dependency
        - pip install autoflake

      script:
        # Optimise files
        - autoflake --in-place --recursive --exclude min .

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Optimise the code to work with PEP8 [skip ci]"

        # Push changes
        - until git push origin HEAD:master; do git pull && git commit --amend -m"$(git log -1 --pretty=%B)"; done;

    - # Optimise the code with YAPF

      install:
        # Install required dependency
        - pip install yapf futures

      script:
        # Optimise with yapf
        - yapf --in-place --recursive --exclude min --style google --parallel .

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Optimise code with YAPF [skip ci]"

        # Push changes
        - until git push origin HEAD:master; do git pull && git commit --amend -m"$(git log -1 --pretty=%B)"; done;

    - # Update Pipfiles

      install:
        # Install required dependency
        - pip install pipenv

      script:
        # Remake pipfiles
        - rm -f Pipfile & rm -f Pipfile.lock
        - pipenv install

      after_script:
        # Add, check and commit
        - git add Pipfile Pipfile.lock && git diff-index --quiet HEAD || git commit -m "CI | Updated Pipfiles [skip ci]"

        # Push changes
        - until git push origin HEAD:master; do git pull && git commit --amend -m"$(git log -1 --pretty=%B)"; done;

    - # Minify the code to seperate directory

      # Install the required dependency
      install:
        - pip install pyminifier

      # Perform before script steps
      before_script:
        # Clear min
        - rm -rf min/*

        # Copy the contents of src to min
        - cp -a src/. min

        # Navigate to min
        - cd min

      script:
        # Perform optimisations
        - find  -type f  -name "*.py" -exec pyminifier --outfile="{}" --prepend="$TRAVIS_BUILD_DIR/misc/minifier-append.txt" "{}" \;

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Minified Files [skip ci]"

        # Push changes
        - until git push origin HEAD:master; do git pull && git commit --amend -m"$(git log -1 --pretty=%B)"; done;

    - stage:              checks & testing # Run unit tests with codecov

      before_install:
        # Check if the codecov YAML file is valid
        - curl --data-binary @codecov.yml https://codecov.io/validate

        # Configure access token to enable pushing to the repository
        - git remote set-url origin https://Richienb:${github_token}@github.com/Richienb/ROS-Code.git

        # Set commit username
        - git config --global user.name "ROS Bot"

        # Set commit email
        - git config --global user.email "richiebendall@gmail.com"

        # Make all shell files in ci executable
        - find $TRAVIS_BUILD_DIR/ci -type f -iname "*.sh" -exec chmod +x {} \;

      install:
        # Install dependencies from requirements.txt
        - pip install -r requirements.txt

        # Install the codecov Pip package
        - pip install codecov

      before_script:
        # Navigate to source code directory
        - cd src

      script:
        # Run unit tests
        - coverage run test_syntax.py
        - coverage run run_file.py "test.ros"

      after_script:
        # Upload results to Codecov
        - codecov

    - # Check for spelling mistakes

      install:
        # Install required dependencies
        - pip install pyspelling pymdown-extensions Pygments

      script:
        # Check for spelling errors
        - pyspelling

    - # Check Makefile commands

      # Skip installation step
      install:            true

      script:

        # Run makefile command to install ROS Code
        - make prepare

        # Run makefile command to uninstall ROS Code
        - make uninstall

    - # Check if pip is working correctly

      # Disable the script
      script:             true

    - stage:              Deployment testing # Build the documentation (for pull request)

      # Only run if on pull request
      if:                 type = pull_request

      install:
        # Install required dependencies
        - pip install mkdocs mkdocs-material pymdown-extensions pygments

      script:
        # Build the documentation
        - mkdocs build --verbose --clean --strict

    - stage:              Deployment # Build and deploy the documentation

      # Only run if on branch
      if:                 type != pull_request

      install:
        # Install required dependencies
        - pip install mkdocs mkdocs-material pymdown-extensions pygments

      # Ensure script is skipped
      script:             true

      before_deploy:
        # Build the documentation
        - mkdocs build --verbose --clean --strict

      # Deploy the documentation
      deploy:
        - provider:       pages
          github_commit:  "CI | Built Documentation [skip ci]"
          skip_cleanup:   true
          github_token:   $github_token
          local_dir:      site
          on:
            branch:       master

      # Clear the cache on Cloudflare
      after_deploy:
        - |
          curl -X DELETE "https://api.cloudflare.com/client/v4/zones/${cf_zone_id}/purge_cache" \
           -H "X-Auth-Email: ${email}" \
           -H "X-Auth-Key: ${cf_api_key}" \
           -H "Content-Type: application/json" \
           --data '{"purge_everything":true}'

    - # Deploy to GitHub releases

      # Ensure script is skipped
      script:             true

      before_deploy:
        # Zip the min directory
        - zip min/* source.zip

      # Deploy to GitHub releases
      deploy:
        - provider:       releases
          name:           edge release
          body:           This is an edge release - a release which is built in realtime since the latest source code commit.
          api_key:        $github_token
          file:           source.zip
          prerelease:     true
          skip_cleanup:   true
          on:
            branch:       master
            condition:    $TRAVIS_COMMIT_RANGE = *"src"*

notifications:
  # Disable emails for build status notifications
  email:                  false
