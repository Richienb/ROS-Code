# Disable sudo
sudo:                    false

# Set build language
language:                python
python:                  3.6.5

# Set build branch
branches:                master

# Run some pre-install scripts
before_install:
  - git remote set-url origin https://Richienb:${github_token}@github.com/Richienb/ROS-Code.git
  - git config --global user.email "richiebendall@gmail.com"
  - git config --global user.name "Richienb"
  - find $TRAVIS_BUILD_DIR/ci -type f -iname "*.sh" -exec chmod +x {} \;

# Install necessary dependencies
install:
  - pip install -r requirements.txt

# The order for executing stages
stages:
  - stage: optimisation
  - stage: need to optimise
  - stage: code testing
  - stage: documentation building

    # Only run if on pull request
    if: [ $TRAVIS_PULL_REQUEST != "false" ]
  - name:                documentation deployment

    # Only run if on branch
    if: [ $TRAVIS_PULL_REQUEST = "false" ]

# All of the jobs
jobs:
  include:
    - stage: optimisation # Optimise the code

      script:

        # Optimise files
        - autopep8 --verbose --in-place --recursive --aggressive --aggressive --aggressive $PWD
        - autoflake --in-place --recursive $PWD

        # Commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Tidied code files [skip ci]"

        # Remake pipfiles
        - rm -f Pipfile & rm -f Pipfile.lock
        - pipenv install

        # Commit
        - git add Pipfile Pipfile.lock && git diff-index --quiet HEAD || git commit -m "CI | Added Pipfiles [skip ci]"

      after_script:
        # Push changes
        - git push origin HEAD:master

    - # Make the code backwards compatible

      script:
        - for i in *.py; do pasteurize -w $i; done

      after_script:
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Added Backwards Compatibility [skip ci]"
        - git push origin HEAD:master
    - stage:             need to optimise # Find everything to optimise

      # Ensure script is skipped
      script:
        - null

      # Lint Code (script can't fail)
      after_script:
        - cd src
        - pylint $PWD
        - flake8 --verbose $PWD

    - stage:             code testing # Run unit tests

      # Navigate to source code directory
      before_script:
        - cd src

      # Run unit tests
      script:
        - python test_syntax.py
        - python run_file.py "test.ros"

    - stage:             documentation building

      # Build the documentation
      script:
        - mkdocs build --verbose --clean --strict


    - stage:             documentation deployment # Deploy the documentation

      # Ensure script is skipped
      script:
        - null

      # Build the documentation
      before_deploy:
        - mkdocs build --verbose --clean --strict

      # Deploy the documentation
      deploy:
        - provider:      pages
          github_commit: "CI | Updated Documentation [skip ci]"
          skip_cleanup:  true
          github_token:  $github_token
          local_dir:     site
          on:
            branch:      master

      # Clear the cache on Cloudflare
      after_deploy:
        - |
          curl -X DELETE "https://api.cloudflare.com/client/v4/zones/${cf_zone_id}/purge_cache" \
           -H "X-Auth-Email: ${email}" \
           -H "X-Auth-Key: ${cf_api_key}" \
           -H "Content-Type: application/json" \
           --data '{"purge_everything":true}'

# Disable build status notifications
notifications:
  email:                 false
