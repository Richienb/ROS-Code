# Disable sudo
sudo:                     false

# Set build language
language:                 python

# Set build language version
python:                   3.6.6

# Set build branch
branches:                 master

# Cache the cache directory
cache:
  directories:
    - $HOME/.cache

# Run some pre-install scripts
before_install:
  - git remote set-url origin https://Richienb:${github_token}@github.com/Richienb/ROS-Code.git
  - git config --global user.email "richiebendall@gmail.com"
  - git config --global user.name "ROS Bot"
  - find $TRAVIS_BUILD_DIR/ci -type f -iname "*.sh" -exec chmod +x {} \;

# Install necessary dependencies
install:
  - pip install -r requirements.txt

# All of the jobs
jobs:
  include:
    - stage:              optimisation # Fix the gitignore if nessesary
      # Only run if on branch
      if:                 type != pull_request

      # Set build language
      language:           generic

      # Skip installation step
      install:            true

      script:
        # Reset Gitignore cache
        - git rm -r --cached .

        # Add all files to the cache
        - git add .

      after_script:
        # Check and commit
        - git diff-index --quiet HEAD || git commit -m "CI | Fix the Gitignore [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Make the code backwards compatible

      # Install required package
      addons:
        apt:
          packages:
            - realpath

      # Install the required dependency
      install:
        - pip install future

      # Navigate to the source code directory
      before_script:
        - cd src

      # Perform optimisations
      script:
        - for file in *.py; do pasteurize -w $(realpath "$file"); done

      # Commit and push changes
      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Added Backwards Compatibility [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Optimise the code to work with PEP8

      install:
        # Install required dependency
        - pip install autopep8

      script:
        # Optimise files
        - autopep8 --verbose --in-place --recursive --aggressive --aggressive --aggressive .

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Optimise the code to work with PEP8 [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Optimise the code to work with FLAKE8

      install:
        # Install required dependency
        - pip install autoflake

      script:
        # Optimise files
        - autoflake --in-place --recursive .

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Optimise the code to work with PEP8 [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Update Pipfiles

      install:
        # Install required dependency
        - pip install pipenv

      script:
        # Remake pipfiles
        - rm -f Pipfile & rm -f Pipfile.lock
        - pipenv install

      after_script:
        # Add, check and commit
        - git add Pipfile Pipfile.lock && git diff-index --quiet HEAD || git commit -m "CI | Updated Pipfiles [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Optimise the code with YAPF

      install:
        # Install required dependency
        - pip install yapf futures

      script:
        # Optimise with yapf
        - yapf --in-place --recursive --style google --parallel src

      after_script:
        # Add, check and commit
        - git add Pipfile Pipfile.lock && git diff-index --quiet HEAD || git commit -m "CI | Optimise code with YAPF [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Minify the code to seperate directory

      # Install required package
      addons:
        apt:
          packages:
            - realpath

      # Install the required dependency
      install:
        - pip install pyminifier

      # Navigate to the source code directory
      before_script:
        - rm -rf min/*
        - cp -a src/. min
        - cd min

      # Perform optimisations
      script:
        - for file in *.py; do pyminifier --outfile=$(realpath "$file") --prepend="ROS Code is licensed under the Apache 2.0 License" $(realpath "$file"); done

      # Commit and push changes
      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Minified Files [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - stage:              checks & testing # Run unit tests with codecov

      # Test in multiple versions of Python
      python:
        - 3.6.6

      # Install required dependencies
      install:
        - pip install -r requirements.txt
        # Install the codecov Pip package
        - pip install codecov

      # Before steps before the script
      before_script:
        # Check if the codecov YAML file is valid
        - curl --data-binary @codecov.yml https://codecov.io/validate
        # Navigate to source code directory
        - cd src

      # Run unit tests
      script:
        - coverage run test_syntax.py
        - coverage run run_file.py "test.ros"

      # Upload results to Codecov
      after_script:
        - codecov

    - # Check for spelling mistakes

      # Install required dependency
      install:
        - pip install pyspelling pymdown-extensions Pygments

      # Check for spelling errors
      script:
        - pyspelling

    - # Check Makefile commands

      # Skip installation step
      install:            true

      # Run makefile commands
      script:

        # Install ROS Code
        - make prepare

        # Uninstall ROS Code
        - make uninstall

    - # Check if pip is working correctly

      # Test in multiple versions of Python
      python:
        - 3.6.6
        - 3.6
        - 3.5
        - 3.4
        - 2.7
        - 2.6

      # Install the dependencies
      install:
        - pip install -r requirements.txt

      # Disable the script
      script:             true

    - stage:              documentation # Build the documentation (for pull request)

      # Only run if on pull request
      if:                 type = pull_request

      install:
        # Install required dependencies
        - pip install mkdocs mkdocs-material pymdown-extensions pygments

      # Build the documentation
      script:
        - mkdocs build --verbose --clean --strict

    - stage:              documentation # Build and deploy the documentation

      # Only run if on branch
      if:                 type != pull_request

      install:
        # Install required dependencies
        - pip install mkdocs mkdocs-material pymdown-extensions pygments

      # Ensure script is skipped
      script:             true

      # Build the documentation
      before_deploy:
        - mkdocs build --verbose --clean --strict

      # Deploy the documentation
      deploy:
        - provider:       pages
          github_commit:  "CI | Built Documentation [skip ci]"
          skip_cleanup:   true
          github_token:   $github_token
          local_dir:      site
          on:
            branch:       master

      # Clear the cache on Cloudflare
      after_deploy:
        - |
          curl -X DELETE "https://api.cloudflare.com/client/v4/zones/${cf_zone_id}/purge_cache" \
           -H "X-Auth-Email: ${email}" \
           -H "X-Auth-Key: ${cf_api_key}" \
           -H "Content-Type: application/json" \
           --data '{"purge_everything":true}'

# Disable build status notifications
notifications:
  email:                  false
