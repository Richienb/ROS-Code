# Disable sudo
sudo:                     false

# Set build language
language:                 python
python:                   3.6.5

# Set build branch
branches:                 master

# Run some pre-install scripts
before_install:
  - git remote set-url origin https://Richienb:${github_token}@github.com/Richienb/ROS-Code.git
  - git config --global user.email "richiebendall@gmail.com"
  - git config --global user.name "Richienb"
  - find $TRAVIS_BUILD_DIR/ci -type f -iname "*.sh" -exec chmod +x {} \;

# Install necessary dependencies
install:
  - pip install -r requirements.txt

# All of the jobs
jobs:
  include:
    - stage:              optimisation # Fix the gitignore if nessesary
      # Only run if on branch
      if:                 type != pull_request
      
      # Set build language
      language: generic
      
      # Disable default install script
      install: true
      
      script:
        # Reset Gitignore cache
        - git rm -r --cached .
        
        # Add all files to the cache
        - git add .
      
      after_script:
        # Check and commit
        - git diff-index --quiet HEAD || git commit -m "CI | Fix the Gitignore [skip ci]"

        # Push changes
        - git push origin HEAD:master
        
    - stage: # Optimise the code with PEP8 and FLAKE8

      script:
        # Optimise files
        - autopep8 --verbose --in-place --recursive --aggressive --aggressive --aggressive $PWD
        - autoflake --in-place --recursive $PWD

      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Tidied code files [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Update Pipfiles

      script:
        # Remake pipfiles
        - rm -f Pipfile & rm -f Pipfile.lock
        - pipenv install

      after_script:
        # Add, check and commit
        - git add Pipfile Pipfile.lock && git diff-index --quiet HEAD || git commit -m "CI | Updated Pipfiles [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - # Make the code backwards compatible

      # Navigate to the source code directory
      before_script:
        - cd src

      # Perform optimisations
      script:
        - for file in *.py; do pasteurize -w "$file"; done

      # Commit and push changes
      after_script:
        # Add, check and commit
        - git add * && git diff-index --quiet HEAD || git commit -m "CI | Added Backwards Compatibility [skip ci]"

        # Push changes
        - git push origin HEAD:master

    - stage:              optimise todo # Find everything to optimise

      # Ensure script is skipped
      script:             true

      # Lint Code (script can't fail)
      after_script:
        - cd src
        - pylint $PWD
        - flake8 $PWD

    - stage:              checks & testing # Run unit tests

      # Navigate to source code directory
      before_script:
        - cd src

      # Run unit tests
      script:
        - python test_syntax.py
        - python run_file.py "test.ros"
        
    - # Check for spelling mistakes
    
      # Install required dependency
      install:
        - pip install pyspelling
        
      # Check for spelling errors
      script:
        - spellcheck

    - stage:              documentation # Build the documentation (for pull request)

      # Only run if on pull request
      if:                 type = pull_request

      # Build the documentation
      script:
        - mkdocs build --verbose --clean --strict


    - stage:              documentation # Build and deploy the documentation

      # Only run if on branch
      if:                 type != pull_request

      # Ensure script is skipped
      script:             true

      # Build the documentation
      before_deploy:
        - mkdocs build --verbose --clean --strict

      # Deploy the documentation
      deploy:
        - provider:       pages
          github_commit:  "CI | Updated Documentation [skip ci]"
          skip_cleanup:   true
          github_token:   $github_token
          local_dir:      site
          on:
            branch:       master

      # Clear the cache on Cloudflare
      after_deploy:
        - |
          curl -X DELETE "https://api.cloudflare.com/client/v4/zones/${cf_zone_id}/purge_cache" \
           -H "X-Auth-Email: ${email}" \
           -H "X-Auth-Key: ${cf_api_key}" \
           -H "Content-Type: application/json" \
           --data '{"purge_everything":true}'

# Disable build status notifications
notifications:
  email:                  false
